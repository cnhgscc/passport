// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: api/passport.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PassportClient is the client API for Passport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassportClient interface {
	UserLogin(ctx context.Context, in *ReqUserLogin, opts ...grpc.CallOption) (*RespUserLogin, error)
	UserLogout(ctx context.Context, in *ReqUserLogout, opts ...grpc.CallOption) (*RespUserLogout, error)
}

type passportClient struct {
	cc grpc.ClientConnInterface
}

func NewPassportClient(cc grpc.ClientConnInterface) PassportClient {
	return &passportClient{cc}
}

func (c *passportClient) UserLogin(ctx context.Context, in *ReqUserLogin, opts ...grpc.CallOption) (*RespUserLogin, error) {
	out := new(RespUserLogin)
	err := c.cc.Invoke(ctx, "/Passport/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportClient) UserLogout(ctx context.Context, in *ReqUserLogout, opts ...grpc.CallOption) (*RespUserLogout, error) {
	out := new(RespUserLogout)
	err := c.cc.Invoke(ctx, "/Passport/UserLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassportServer is the server API for Passport service.
// All implementations must embed UnimplementedPassportServer
// for forward compatibility
type PassportServer interface {
	UserLogin(context.Context, *ReqUserLogin) (*RespUserLogin, error)
	UserLogout(context.Context, *ReqUserLogout) (*RespUserLogout, error)
	mustEmbedUnimplementedPassportServer()
}

// UnimplementedPassportServer must be embedded to have forward compatible implementations.
type UnimplementedPassportServer struct {
}

func (UnimplementedPassportServer) UserLogin(context.Context, *ReqUserLogin) (*RespUserLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedPassportServer) UserLogout(context.Context, *ReqUserLogout) (*RespUserLogout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogout not implemented")
}
func (UnimplementedPassportServer) mustEmbedUnimplementedPassportServer() {}

// UnsafePassportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassportServer will
// result in compilation errors.
type UnsafePassportServer interface {
	mustEmbedUnimplementedPassportServer()
}

func RegisterPassportServer(s grpc.ServiceRegistrar, srv PassportServer) {
	s.RegisterService(&Passport_ServiceDesc, srv)
}

func _Passport_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Passport/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).UserLogin(ctx, req.(*ReqUserLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passport_UserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserLogout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).UserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Passport/UserLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).UserLogout(ctx, req.(*ReqUserLogout))
	}
	return interceptor(ctx, in, info, handler)
}

// Passport_ServiceDesc is the grpc.ServiceDesc for Passport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Passport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Passport",
	HandlerType: (*PassportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _Passport_UserLogin_Handler,
		},
		{
			MethodName: "UserLogout",
			Handler:    _Passport_UserLogout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/passport.proto",
}
